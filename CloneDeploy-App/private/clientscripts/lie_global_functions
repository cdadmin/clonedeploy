#!/bin/bash
CLIENT_LOG="/tmp/clientlog.log"

function set_curl_command()
{
	export curlCommand="curl -sSk"
	export curlEnd=" --connect-timeout 10 --stderr -"
	export curlEndRedirect=" --connect-timeout 10 --stderr - >> /tmp/clientlog.log"
}

function set_curl_auth()
{
	export curlAuth="curl -sSk -H Authorization:$(echo -n "$USER_TOKEN" | base64)"
}

function clear_and_move_down()
{
	clear
	local line=0
	while [ "$line" -le "6" ]; do
		line=$(( $line + 1 ))
		echo
	done
}

function parse_json()
{
	echo `echo "$1" | jq "$2" -r`
}

function remove_whitespace() {
    local var="$*"
    var="${var#"${var%%[![:space:]]*}"}"   # remove leading whitespace characters
    var="${var%"${var##*[![:space:]]}"}"   # remove trailing whitespace characters
    echo -n "$var"
}

function checkin()
{	
  clear_and_move_down
    if [ "$is_ondemand" = "true" ]; then
	  log " ** Using On Demand Mode ** "
      log " ** Creating Active Task ** " "display"
	  if [ "$task" = "ondmulticast" ]; then
	     checkInStatus=$($curlAuth --data "mac=$mac&objectId=$multicastId&task=$task&userId=$user_id&computerId=$computer_id" "${web}OnDemandCheckIn" $curlEnd)
	  else
	     checkInStatus=$($curlAuth --data "mac=$mac&objectId=$image_profile_id&task=$task&userId=$user_id&computerId=$computer_id" "${web}OnDemandCheckIn" $curlEnd)
	  fi
    elif [ "$task" = "clobber" ]; then
	   log " ** Using Clobber Mode ** "
	   checkInStatus=$($curlAuth --data "mac=$mac&objectId=$image_profile_id&task=$task&userId=$user_id&computerId=$computer_id" "${web}OnDemandCheckIn" $curlEnd)
	elif [ "$task" = "modelmatchdeploy" ]; then
	   log " ** Using Model Match Mode ** "
	   checkInStatus=$($curlAuth --data "mac=$mac&objectId=$image_profile_id&task=$task&userId=$user_id&computerId=$computer_id" "${web}OnDemandCheckIn" $curlEnd)
    else
	  log " ** Verifying Active Task ** " "display"
	  checkInStatus=`$curlAuth --data "taskId=$task_id" "${web}CheckIn" $curlEnd`
	fi

	if [ ! "$?" = "0" ]; then
		error "$checkInStatus"
	else
		if [ "`parse_json "$checkInStatus" .Result`" != "true" ]; then
			error "`parse_json "$checkInStatus" .Message`"
		else
			sleep 1
			for arg in "`parse_json "$checkInStatus" .TaskArguments`"; do case "$arg" in *=*) eval "$arg"; log "$arg"; esac; done
			
			if [ "$(parse_json "$checkInStatus" .ImageEnvironment)" != "linux" ] && [ "$(parse_json "$checkInStatus" .ImageEnvironment)" != "" ]; then
			  error "The Imaging Environment For The Image Does Not Match The Currently Loaded Environment"
			fi
			
			#On demand task ids are created later than web tasks, get it now
			if [ "$is_ondemand" = "true" ] || [ "$task" = "clobber" ] || [ "$task" = "modelmatchdeploy" ]; then
			  task_id=$(parse_json "$checkInStatus" .TaskId)
			fi
	
			log " ...... Success" "display"
		fi
	fi
	
	if [ "$web_cancel" = "true" ]; then
	  . lie_cancel &
	fi
	echo
	
    if [ "$task" != "multicast" ] && [ "$task" != "ondmulticast" ]; then
	   log " ** Checking Current Queue ** " "display"	
        while true; do
	      queue_status=$($curlAuth --data "taskId=$task_id" "${web}CheckQueue" $curlEnd)
		  if [ "$(parse_json "$queue_status" .Result)" = "true" ]; then
		    break
		  else
		    echo "** Queue Is Full, Waiting For Open Slot ** "
		    echo " ...... Current Position $(parse_json "$queue_status" .Position)"
		    sleep 5
		  fi
        done
	    log " ...... Complete" "display"
		echo
	else
	   $curlAuth --data "taskId=$task_id" "${web}UpdateStatusInProgress" $curlEnd
	fi
	
	sleep 2
}

function checkout()
{
	echo
	log " ** Closing Active Task ** " "display"
	cd /
	sleep 10
	umount /storage &> /dev/null
	
	cat /tmp/clientlog.log | grep -v "percent completed" > /tmp/cleanedlog.log
	
	if [ "$task" = "multicast" ] || [ "$task" = "ondmulticast" ]; then
	mccheckoutResult=$($curlAuth --data "portBase=$multicast_port" "${web}MulticastCheckOut" $curlEnd)
		log " ...... $mccheckoutResult"
	fi
		
	
	  if [ "$task" = "permanentdeploy" ]; then
	    checkout_status=$($curlAuth --data "taskId=$task_id" "${web}PermanentTaskCheckOut" $curlEnd)
	  else
	    checkout_status=$($curlAuth --data "taskId=$task_id" "${web}CheckOut" $curlEnd)
	  fi
	  log " ...... $checkout_status" "display"
	
	echo
		
	$curlAuth -F computerId="$(echo -n $computer_id | base64)" -F logContents="$(cat /tmp/cleanedlog.log | base64)"  -F subType="$(echo -n $task | base64)"  -F mac="$(echo -n $mac | base64)" "${web}UploadLog" $curlEnd
		
	sleep 1;
	
	if [ "$task_completed_action" = "Power Off" ]; then
		poweroff -f;
	elif [ "$task_completed_action" = "Exit To Shell" ]; then
		/bin/bash
	else
		reboot -f
	fi
	
}




function error()
{
  local reboot_time=$2
	echo
	log " ** An Error Has Occurred ** " "display"
	log " ...... $1" "display"
	
	#Expand any shrunk volumes 
	for shrunk_volume in $shrunk_volumes; do
	  log " ** Expanding Shrunk Volume $shrunk_volume ** " "display"
      filesystem_type=`blkid -po udev $shrunk_volume | grep FS_TYPE | awk -F'=' '{print $2}'`
      expand_volume $shrunk_volume $filesystem_type
    done
	
	echo
	echo " ** Rebooting In One Minute ** "
	
	cat /tmp/clientlog.log | grep -v "percent completed" > /tmp/cleanedlog.log
	

	
		
	$curlAuth -F computerId="$(echo -n $computer_id | base64)" -F logContents="$(cat /tmp/cleanedlog.log | base64)"  -F subType="$(echo -n $task | base64)"  -F mac="$(echo -n $mac | base64)" "${web}UploadLog" $curlEnd	
	
	if [ -n "$reboot_time" ]; then
	  sleep $reboot_time
	else
	  $curlAuth --data "taskId=$task_id&error=$1" "${web}ErrorEmail" $curlEnd
	  sleep 60
	fi
	if [ "$task_completed_action" = "Power Off" ]; then
		poweroff -f;
	elif [ "$task_completed_action" = "Exit To Shell" ]; then
		/bin/bash;
	else
		reboot -f
	fi 
}

function expand_volume()
{

	local partition="$1"
	local filesystem="$2"
	
	echo
	if [ "$filesystem" = "ext2" ] || [ "$filesystem" = "ext3" ] || [ "$filesystem" = "ext4" ]; then
		log " ** Expanding EXT Volume On $1 ** " "display"
		partprobe &>/dev/null;
		sleep 5

		resize2fs $1 2>>$CLIENT_LOG
		
		if [ ! "$?" = "0" ]; then
			log "Warning, EXT File System Did Not Resize Properly.  Check Your Disk Size After Booting" "display"
			$curlAuth --data "computerId=$computer_id&error=Ext Volume Did Not Expand Properly" "${web}ErrorEmail" $curlEnd
		else
			log " ...... Success" "display"
		fi
		echo
		e2fsck -fy $1 &>>$CLIENT_LOG
	elif [ "$filesystem" = "xfs" ]; then
	  log " ** Expanding XFS Volume On $1 ** " "display"
	  partprobe &>/dev/null;
	  sleep 5

	  mkdir /mnt/xfs &>/dev/null
	  mount $1 /mnt/xfs
	  xfs_growfs /mnt/xfs 2>>$CLIENT_LOG
		
      if [ ! "$?" = "0" ]; then
	    log "Warning, XFS File System Did Not Resize Properly.  Check Your Disk Size After Booting" "display"
			$curlAuth --data "computerId=$computer_id&error=Ext Volume Did Not Expand Properly" "${web}ErrorEmail" $curlEnd
		else
			log " ...... Success" "display"
		fi
		echo
	  umount /mnt/xfs
	elif [ "$filesystem" = "ntfs" ]; then
	  ntfsfix -b -d $1 &>>$CLIENT_LOG
		volumeSize=`ntfsresize -f -i -P $1 | grep -i "current volume size:" | cut -d " " -f4`
		deviceSize=`ntfsresize -f -i -P $1 | grep -i "current device size:" | cut -d " " -f4`
		volumeMargin=$(( $deviceSize - $volumeSize ))
		log " volumeMargin: $volumeMargin"
		if [ "$volumeMargin" -lt "104857600" ]; then
			return 0
		fi
		log " ** Expanding NTFS Volume on $1 ** " "display"

		partprobe &>/dev/null;
		sleep 5
			
		#Found That expanding all the way sometimes corrupted the filesystem
		deviceSize=$(( $deviceSize - 10485760 )) #Don't expand too far
		log "Expanding NTFS Volume To: $deviceSize"
		ntfsresize -f -b -s $deviceSize $1 &>> $CLIENT_LOG << CONFIRM
y
CONFIRM

		if [ ! "$?" = "0" ]; then
			log "Warning, NTFS File System Did Not Resize Properly.  Check Your Disk Size After Booting To Windows" "display"
			$curlAuth --data "computerId=$computer_id&error=Ntfs Volume Did Not Expand Properly" "${web}ErrorEmail" $curlEnd
		else
			log " ...... Success" "display"
		fi
	
		echo 
		ntfsfix -b -d $1 &>>$CLIENT_LOG
	fi

}

function get_hard_drives()
{
	local task_type="$1"
	local partitions
	local partition_count
	local partition
	
	log " ** Looking For Hard Drive(s) ** " "display"
	log " ...... Displaying Available Devices "
	blockdev --report &>> $CLIENT_LOG
	fdisk -l &>> $CLIENT_LOG

	if [ -n "$custom_hard_drives" ]; then
		hard_drives="$custom_hard_drives"
		log " ...... Hard Drive(s) Set By Image Profile: $hard_drives" "display"		
	else
	  if [ "$task_type" = "upload" ]; then
		all_hard_drives=`lsblk -ipdno KNAME | grep -v boot | grep -v rpmb`
		log "all_hard_drives: $all_hard_drives"
		for hdd in $all_hard_drives; do
		  disk_label=$(fdisk -l $hdd | grep -i "disklabel type" | tr -d ' ' | awk -F ':' '{print $2}')
		  log "disk_label: $disk_label $hdd"
		  #Exclude usb drive
		  drive_name=$(echo "$hdd" | sed 's/\/dev\//''/g')
		  if readlink /sys/block/$drive_name | grep -q -m 1 "usb"; then
		    continue
		  fi
		  #Only get hard drives with valid disk labels
		  if [ "$disk_label" = "dos" ] || [ "$disk_label" = "gpt" ]; then
		    #only get hard drives that have partitions.  No reason to try and upload a disk without partitions
			partitions=$(lsblk -ipno KNAME | sort | grep "$hdd" | grep -vw "$hdd" 2>> $CLIENT_LOG)
			log "partitions: $partitions"
			partition_count=0  
            for partition in $partitions; do
              partition_count=$(( $partition_count + 1 ))
            done
            if [ "$partition_count" -gt "0" ]; then
              hard_drives="$hard_drives $hdd "
            fi	    
		  fi
		done
	  else #deploy
	    #When deploying it is very possible the hard drive won't have a disk label so don't use the method used for uploads
	    all_hard_drives=`lsblk -ipdno KNAME | grep -v boot | grep -v rpmb`
		for hdd in $all_hard_drives; do
		  #Exclude usb drive
		  drive_name=$(echo "$hdd" | sed 's/\/dev\//''/g')
		  if readlink /sys/block/$drive_name | grep -q -m 1 "usb"; then
		    continue
		  else
		    hard_drives="$hard_drives $hdd "
		  fi
		done
	  fi
	fi
	
	hard_drive_count=0
	for hdd in $hard_drives; do	
		hard_drive_count=$(( $hard_drive_count + 1 ))
	done
		
	log " ...... Found $hdCount Drive(s)" "display"
	log " ...... Drive(s): $hard_drives" "display"
	
	if [ "$hard_drive_count" = "0" ]; then
		error "Could Not Find A Hard Drive Attached To This Computer.  Try A Different Kernel."
	fi
	sleep 2
	echo
}

function log()
{
	echo "" >> $CLIENT_LOG
	if [ "$2" = "display" ]; then
		echo "$1" | tee -a $CLIENT_LOG
	else
		echo "$1" >> $CLIENT_LOG
	fi
}

function log_boot_args()
{
	log " ** Displaying Boot Arguments ** "
	log "$(cat /proc/cmdline) MAC: $mac"
	uname -a >> $CLIENT_LOG
	log "Boot Image Version: $(cat /etc/cd_version)"
}


function mount_smb()
{
	local mount_result
	local all_cluster_dps
	local result
	
	log " ** Mounting SMB Share **" "display"
	mkdir /storage &>> $CLIENT_LOG
	smbInfo=$($curlAuth --data "dpId=$dp_id&task=$task" "${web}DistributionPoint" $curlEnd)
	log " ...... Connecting To $(parse_json "$smbInfo" .DisplayName)" "display"
	if [ "smb_debug" = "1" ]; then
	  log "$smbInfo"
	fi
	
	mount_result=$(mount_smb_sub "$smbInfo")
	if [ "$mount_result" = "true" ]; then
	  log " ...... Success" "display"
	else
	  #Look for other distribution points
	  log " ...... Looking For Additional Distribution Points"
	  all_cluster_dps=$($curlAuth --data "computerId=$computer_id" "${web}GetAllClusterDps" $curlEnd)
	  if [ ! "$?" = "0" ]; then
		error "Could Not Find Additional Distribution Points"
	  else
	    if [ "$all_cluster_dps" = "single" ]; then
			error "Could Not Mount SMB Share and Server Is Not Clustered"
		elif [ "$all_cluster_dps" = "false" ]; then
			error "Could Not Mount SMB Share and An Unknown Error Occurred While Looking For Others"
		else
			for local_dp_id in $all_cluster_dps; do
			  sleep 2
			  smbInfo=$($curlAuth --data "dpId=$local_dp_id&task=$task" "${web}DistributionPoint" $curlEnd)
			  log " ...... Connecting To $(parse_json "$smbInfo" .DisplayName)" "display"
			  if [ "smb_debug" = "1" ]; then
				log "$smbInfo"
			  fi
			  mount_result=$(mount_smb_sub "$smbInfo")
			  if [ "$mount_result" = "true" ]; then
			    log " ...... Success" "display"
				dp_id=$local_dp_id
				result="true"
				break
			  else
			    result="false"
			  fi
			done
			
			if [ "$result" = "false" ]; then
			  #no smb shares could be mounted
			  error "Could Not Mount Any Available SMB Shares"
			fi
		fi
	  fi
	fi
	
	echo
	sleep 2
}

function mount_smb_sub()
{
	local smbInfo=$1
	
	for smbVersion in 3.0 2.1 2.0 1.0; do	
		mount -t cifs "$(parse_json "$smbInfo" .SharePath)" /storage -o user="$(parse_json "$smbInfo" .Username)",pass="$(parse_json "$smbInfo" .Password)",dom="$(parse_json "$smbInfo" .Domain)",vers=$smbVersion 2>/tmp/mntstat
		if [ ! $? = "0" ]; then
			cat /tmp/mntstat >> $CLIENT_LOG
			errormsg=$(cat /tmp/mntstat)
		else
			cd /storage/images/$image_name;
			if [ "$?" != "0" ]; then
				log " ...... Could Not Change Directory To /storage/images/$image_name Check Permissions" "display"
				cd /
			    umount /storage
			    echo "false"
			else
				echo "true"
			fi
			
			break
		fi
		
		if [ "$smbVersion" = "1.0" ]; then
			log " ...... Could Not Mount SMB Share" "display"
			echo "false"
		fi
	done
}

function move_to_front_of_list()
{
  local item=$1
  local delim=$2
  local list=$3
  echo ${item} $(echo "$list" | tr "${delim}" " " | xargs -n 1 | grep -v "^${item}$") | xargs | tr " " "${delim}"
}

function process_scripts()
{
  local scripts="$1"
  for script_id in $scripts; do
    $curlAuth --data "scriptId=$script_id" "${web}GetCustomScript" $curlEnd > /tmp/custom_script
	log " ** Running Custom Script With Id $script_id ** " "display"
	sleep 5
	#source script in sub shell so the values of the core script do not get overwritten
	( . /tmp/custom_script )
  done
}

function process_sysprep_tags()
{
  local partition="$1"
  log " ** Processing Sysprep Tags On $partition ** " "display"
  sleep 5
  mkdir /mnt/ntfs &> /dev/null	
  umount /mnt/ntfs
  ntfs-3g -o force,rw,remove_hiberfile $partition /mnt/ntfs &>/dev/null
  if [ "$?" != "0" ]; then
    log "Could Not Mount NTFS To Change Answer File"
	return 1
  fi
  
  if [ -f "/mnt/ntfs/Windows/Panther/unattend.xml" ]; then
    log " ...... Found Answer File At /Windows/Panther/unattend.xml, Updating Answer File" "display"
	for tag_id in $sysprep_tags; do
      sysprep_tag_json=$($curlAuth --data "tagId=$tag_id&imageEnvironment=lin" "${web}GetSysprepTag" $curlEnd)
	  log "$sysprep_tag_json"
	  eval echo -e $(parse_json "$sysprep_tag_json" .Contents) > /tmp/syspreptag
	  cat /tmp/syspreptag >> $CLIENT_LOG
	  perl -0777 -i -pe "s/($(parse_json "$sysprep_tag_json" .OpeningTag)).*($(parse_json "$sysprep_tag_json" .ClosingTag))/\${1}$(cat /tmp/syspreptag)\${2}/si" /mnt/ntfs/Windows/Panther/unattend.xml 
	done
	unix2dos /mnt/ntfs/Windows/Panther/unattend.xml
	#Not sure if this elif is really needed
  elif [ -f "/mnt/ntfs/Windows/System32/sysprep/Panther/unattend.xml" ]; then
     log " ...... Found Answer File At /Windows/System32/sysprep/Panther/unattend.xml"
	 for tag_id in $sysprep_tags; do
     sysprep_tag_json=$($curlAuth --data "tagId=$tag_id&imageEnvironment=lin" "${web}GetSysprepTag" $curlEnd)
	  log "$sysprep_tag_json"
	  eval echo -e $(parse_json "$sysprep_tag_json" .Contents) > /tmp/syspreptag
	  cat /tmp/syspreptag >> $CLIENT_LOG
	  perl -0777 -i -pe "s/($(parse_json "$sysprep_tag_json" .OpeningTag)).*($(parse_json "$sysprep_tag_json" .ClosingTag))/\${1}$(cat /tmp/syspreptag)\${2}/si" /mnt/ntfs/Windows/System32/sysprep/Panther/unattend.xml
    done
  else
    log " ...... Could Not Find Answer File"
  fi
  umount /mnt/ntfs
}

function process_file_copy()
{
  local current_object="$1"
  local object_type="$2"
  local array_index=-1
  local destination
   log " ** Processing File Copy ** " "display"
   sleep 5
   if [ "$standard_partition_type" = "legacy" ]; then
	  destination=${hard_drive}${partition_prefix}2
	elif [ "$standard_partition_type" = "efi" ]; then
	  destination=${hard_drive}${partition_prefix}4
	else
      destination=${hard_drive}${partition_prefix}$(parse_json "$current_object" .Number)
	fi
  while [  "$(( $array_index + 1 ))" -lt "$(parse_json "$file_copy_schema" .Count)" ]; do
    array_index=$(( $array_index + 1))
    current_file="$(parse_json "$file_copy_schema" .FilesAndFolders[$array_index])"
    log "$current_file"
	if [ "$object_type" = "partition" ]; then
	  if [ "$(parse_json "$current_object" .Number)" = "$(parse_json "$current_file" .DestinationPartition)" ] || [ "$partition_method" = "standard" ]; then
	    log "Copying /storage/resources/$(parse_json "$current_file" .SourcePath)"
		if [ "$(parse_json "$current_object" .FileSystem)" = "ntfs" ]; then
          mkdir /mnt/fs &> /dev/null
		  ntfs-3g -o force,rw,remove_hiberfile $destination /mnt/fs &>/dev/null
          if [ "$?" != "0" ]; then
            log "Could Not Mount NTFS"
	        return 1
          fi
		else # only ext or xfs
		  mkdir /mnt/fs &> /dev/null
		  mount $destination /mnt/fs
		   if [ "$?" != "0" ]; then
             log "Could Not Mount Filesystem"
	         return 1
           fi
		fi
		  if [ -d "/storage/resources/$(parse_json "$current_file" .SourcePath)" ]; then
		    if [ "$(parse_json "$current_file" .FolderCopyType)" = "Folder" ]; then
		      cp -R "/storage/resources/$(parse_json "$current_file" .SourcePath)" "/mnt/fs/$(parse_json "$current_file" .DestinationFolder)/" &>>$CLIENT_LOG
			else #FolderCopyType = contents
			  cp -R "/storage/resources/$(parse_json "$current_file" .SourcePath)/." "/mnt/fs/$(parse_json "$current_file" .DestinationFolder)/" &>>$CLIENT_LOG
			fi		
		  else
            cp "/storage/resources/$(parse_json "$current_file" .SourcePath)" "/mnt/fs/$(parse_json "$current_file" .DestinationFolder)/" &>>$CLIENT_LOG
		  fi
	  fi
	else # object_type = lvm
	  if [ "$object_type" = "$(parse_json "$current_file" .DestinationPartition)" ]; then
	    log "Copying /storage/resources/$(parse_json "$current_file" .SourcePath)"
		if [ "$(parse_json "$current_object" .FileSystem)" = "ntfs" ]; then
          mkdir /mnt/fs &> /dev/null
		  ntfs-3g -o force,rw,remove_hiberfile /dev/mapper/$object_type /mnt/fs &>/dev/null
          if [ "$?" != "0" ]; then
            log "Could Not Mount NTFS"
	        return 1
          fi
		else # only ext or xfs
		  mkdir /mnt/fs &> /dev/null
		  mount /dev/mapper/$object_type /mnt/fs
		   if [ "$?" != "0" ]; then
             log "Could Not Mount Filesystem"
	         return 1
           fi
		fi
		  if [ -d "/storage/resources/$(parse_json "$current_file" .SourcePath)" ]; then
		    if [ "$(parse_json "$current_file" .FolderCopyType)" = "Folder" ]; then
		      cp -R "/storage/resources/$(parse_json "$current_file" .SourcePath)" "/mnt/fs/$(parse_json "$current_file" .DestinationFolder)/" &>>$CLIENT_LOG
			else #FolderCopyType = contents
			  cp -R "/storage/resources/$(parse_json "$current_file" .SourcePath)/." "/mnt/fs/$(parse_json "$current_file" .DestinationFolder)/" &>>$CLIENT_LOG
			fi		
		  else
            cp "/storage/resources/$(parse_json "$current_file" .SourcePath)" "/mnt/fs/$(parse_json "$current_file" .DestinationFolder)/" &>>$CLIENT_LOG
		  fi
		fi
	fi
	umount /mnt/fs
  done
}

function update_registry_key()
{
  local root="$1"
  local key="$2"
  local value="$3"
  reged -e "$root" &>>$CLIENT_LOG  <<EOFN 
ed $key
$value
q
y
EOFN
}

